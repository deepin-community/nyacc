;; nyacc/lang/c99/c99-04.test		-*- scheme -*-
;;
;; Copyright (C) 2017 Matthew R. Wette
;; 
;; Copying and distribution of this file, with or without modification,
;; are permitted in any medium without royalty provided the copyright
;; notice and this notice are preserved.  This file is offered as-is,
;; without any warranty.

;; test C99 parser in decl mode

(define-module (c99-04)
  #:use-module (nyacc lang c99 parser)
  #:use-module (nyacc lang c99 util)
  #:use-module (test-suite lib))
(use-modules (ice-9 pretty-print)) (define pp pretty-print)

(define incs '("exam.d"))

(define (parse-string str)
  (with-input-from-string str
    (lambda ()
      (parse-c99 #:inc-dirs incs #:mode 'decl #:inc-help c99-std-help))))

(define (parse-file file)
  (with-input-from-file file
    (lambda ()
      (parse-c99 #:inc-dirs incs #:mode 'decl))))

(define ctr
  (let ((p (make-count-reporter))) (register-reporter (car p)) ((cadr p))))
(register-reporter full-reporter)

;; parser test
(with-test-prefix "nyacc/c99-04, decl mode"

  ;; parse with include file
  (pass-if "remove CPP control, leave include, and defines"
    (equal?
     (parse-file "exam.d/ex14.c")
     '(trans-unit
       (cpp-stmt
	(include
	 (@ (path "exam.d/ex14.h"))
	 "\"ex14.h\""
	 (trans-unit
          (decl (decl-spec-list
                 (stor-spec (typedef))
                 (type-spec (fixed-type "int")))
		(init-declr-list (init-declr (ident "eval_t")))))))
       (cpp-stmt (define (name "ABC") (repl "")))
       (decl (decl-spec-list (type-spec (typename "eval_t")))
             (init-declr-list (init-declr (ident "x"))))
       (comment " used by c99-04.test "))))

  (pass-if "GNU __asm__ parsing"
    (and
     (equal?
      (parse-string "void foo() { __asm__(\"mov r0,r1\"); }")
      '(trans-unit
	(fctn-defn
	 (decl-spec-list (type-spec (void)))
	 (ftn-declr (ident "foo") (param-list))
	 (compd-stmt
	  (block-item-list
	   (expr-stmt
            (asm-expr
	     (@ (extension "GNUC"))
	     (string "mov r0,r1"))))))))
     (equal?
      (parse-string
       "void foo() { __asm__(\"mov r0,r1\" : [reg] \"=&d\" (reg)); }")
      '(trans-unit
	(fctn-defn
	 (decl-spec-list (type-spec (void)))
	 (ftn-declr (ident "foo") (param-list))
	 (compd-stmt
	  (block-item-list
	   (expr-stmt
            (asm-expr
	     (@ (extension "GNUC"))
	     (string "mov r0,r1")
	     (asm-outputs
	      (asm-operand (ident "reg") (string "=&d") (ident "reg"))))))))))
     (equal?
      (parse-string
       (string-append
	"void foo() { __asm__(\"mov r0,r1\" : [reg] \"=&d\" (reg)"
	" : [mcu] \"I\" (123), [ssr] \"X\" (456)); }"))
      '(trans-unit
	(fctn-defn
	 (decl-spec-list (type-spec (void)))
	 (ftn-declr (ident "foo") (param-list))
	 (compd-stmt
	  (block-item-list
	   (expr-stmt
            (asm-expr
	     (@ (extension "GNUC"))
	     (string "mov r0,r1")
	     (asm-outputs
	      (asm-operand (ident "reg") (string "=&d") (ident "reg")))
	     (asm-inputs
	      (asm-operand (ident "mcu") (string "I") (p-expr (fixed "123")))
	      (asm-operand
	       (ident "ssr") (string "X") (p-expr (fixed "456")))))))))))
     (equal?
      (parse-string
       (string-append
	"void foo() { __asm__(\"mov r0,r1\" : [reg] \"=&d\" (reg)"
	" : [mcu] \"I\" (123), [ssr] \"X\" (456) : \"foo\", \"bar\" ); }"))
      '(trans-unit
	(fctn-defn
	 (decl-spec-list (type-spec (void)))
	 (ftn-declr (ident "foo") (param-list))
	 (compd-stmt
	  (block-item-list
	   (expr-stmt
            (asm-expr (@ (extension "GNUC"))
		      (string "mov r0,r1")
		      (asm-outputs
		       (asm-operand (ident "reg") (string "=&d") (ident "reg")))
		      (asm-inputs
		       (asm-operand (ident "mcu") (string "I")
				    (p-expr (fixed "123")))
		       (asm-operand (ident "ssr") (string "X")
				    (p-expr (fixed "456"))))
		      (asm-clobbers (string "foo") (string "bar")))))))))
     
     (equal?
      (parse-string
       (string-append
	"void foo() { __asm__ goto (\"mov r0,r1\" : "
	": [mcu] \"I\" (123), [ssr] \"X\" (456) "
	" : \"foo\", \"bar\" : error ); }"))
      '(trans-unit
	(fctn-defn
	 (decl-spec-list (type-spec (void)))
	 (ftn-declr (ident "foo") (param-list))
	 (compd-stmt
	  (block-item-list
	   (expr-stmt
	    (asm-expr
	     (@ (extension "GNUC") (goto "true"))
	     (string "mov r0,r1")
	     (asm-outputs)
	     (asm-inputs
	      (asm-operand (ident "mcu") (string "I") (p-expr (fixed "123")))
	      (asm-operand (ident "ssr") (string "X") (p-expr (fixed "456"))))
	     (asm-clobbers (string "foo") (string "bar"))
	     (asm-gotos (ident "error"))))))))))))
    
(exit (if (positive? (assq-ref ctr 'fail)) 1 0))
;; --- last line ---
